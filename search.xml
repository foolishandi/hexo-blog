<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>这是一个测试</title>
    <url>/hexo-blog/2022/07/24/test/</url>
    <content><![CDATA[<div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<div class="hide-block"><button type="button" class="hide-button" style="background-color: bg;color: color">display
    </button><div class="hide-content"><p>content </p>
</div></div>

<div class="note flat"><p>默认提示块标签</p>
</div>

<div class="note default flat"><p>default 提示块标签</p>
</div>

<div class="note primary flat"><p>primary 提示块标签</p>
</div>

<div class="note success flat"><p>success 提示块标签</p>
</div>

<div class="note info flat"><p>info 提示块标签</p>
</div>

<div class="note warning flat"><p>warning 提示块标签</p>
</div>

<div class="note danger flat"><p>danger 提示块标签</p>
</div>


<div class="tabs" id="test2"><ul class="nav-tabs"></ul><div class="tab-contents"></div></div>


<p>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/" 
  title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/" 
  title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p>
<p>你看我长得漂亮不</p>
<p><img src="https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png"></p>
<p>我觉得很漂亮<img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px"/></p>
<p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label default">中道崩殂blue</mark> 。今天下三分，<mark class="hl-label default">益州疲敝pink</mark> ，此诚<mark class="hl-label default">危急存亡之秋red</mark> 也！然侍卫之臣，不懈于内；<mark class="hl-label default">忠志之士purple</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label default">作奸orange</mark> 、<mark class="hl-label default">犯科green</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p>
<div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p>
</div></div><div class='timeline-item-content'><p>这是测试页面</p>
</div></div></div>]]></content>
      <categories>
        <category>Test</category>
      </categories>
  </entry>
  <entry>
    <title>ES6+进阶</title>
    <url>/hexo-blog/2022/07/24/ES6/</url>
    <content><![CDATA[<div class="note success simple"><h2 id="语言进阶"><a href="#语言进阶" class="headerlink" title="语言进阶"></a>语言进阶</h2></div>

<div class="note simple"><p><a href="https://www.runoob.com/jsref/jsref-obj-array.html">js初步入门学习</a><br><a href="https://blog.csdn.net/ciel_2/article/details/113195335?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165867868116782388081673%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165867868116782388081673&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-113195335-null-null.142%5Ev33%5Enew_blog_pos_by_title,185%5Ev2%5Econtrol&utm_term=es6%E6%96%B0%E7%89%B9%E6%80%A7&spm=1018.2226.3001.4187">ES6新特性</a><br><a href="https://es6.ruanyifeng.com/">更多内容，见：阮一峰老师的 es6 讲解</a></p>
</div>

<div class="tabs" id="first"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#first-1">Array</button></li><li class="tab"><button type="button" data-href="#first-2">AOP切片</button></li><li class="tab"><button type="button" data-href="#first-3">防抖与节流</button></li><li class="tab"><button type="button" data-href="#first-4">柯里化与反柯里化</button></li><li class="tab"><button type="button" data-href="#first-5">继承与new</button></li><li class="tab"><button type="button" data-href="#first-6">深浅拷贝</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="first-1"><p><mark class="hl-label blue">常用方法</mark> </p>
<div class="note simple"><p><mark class="hl-label green">初始化数组</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="number">1.</span>新建一维数组</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>).<span class="title function_">fill</span>(<span class="number">0</span>) <span class="comment">// &gt;[0,0,0,0,0]</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>新建二维数组</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function"><span class="params">e</span>=&gt;</span><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>).<span class="title function_">fill</span>(<span class="number">0</span>))</span><br><span class="line"><span class="comment">// &gt;[</span></span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>转化类数组</span><br><span class="line"><span class="title class_">LikeArray</span> 可以是 dom 元素组，<span class="variable language_">arguments</span>，<span class="title class_">Map</span>，<span class="title class_">Set</span> 和布置了 iterate 接口的对象等</span><br><span class="line">方式一:</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">LikeArray</span>)</span><br><span class="line">方式二:</span><br><span class="line">[...<span class="title class_">LikeArray</span>]</span><br></pre></td></tr></table></figure></div>

<div class="note simple"><p><mark class="hl-label green">返回可迭代对象</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">一般用于对象,普通对象不方便直接遍历，可以转换成数组再遍历</span><br><span class="line"><span class="attr">eg</span>:<span class="keyword">let</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>]; <span class="number">1.</span>返回对象[key,value]的二维数组</span><br><span class="line">方式一:[...fruits.<span class="title function_">entries</span>()]</span><br><span class="line">方式二:<span class="title class_">Object</span>.<span class="title function_">entries</span>(fruits)</span><br><span class="line"><span class="comment">// &gt;[</span></span><br><span class="line">[<span class="number">0</span>, <span class="string">&quot;Banana&quot;</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="string">&quot;Orange&quot;</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="string">&quot;Apple&quot;</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="string">&quot;Mango&quot;</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>返回对象的 key 数组</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(fruits) <span class="comment">// &gt;[&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>返回对象的 values 数组</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(fruits) <span class="comment">// &gt;[&quot;Banana&quot;,&quot;Orange&quot;,&quot;Apple&quot;,&quot;Mango&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="note simple"><p><mark class="hl-label green">数组检查与过滤</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>数组检查</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) <span class="comment">//判断是不是数组 &gt;true</span></span><br><span class="line">arr.<span class="title function_">every</span>(<span class="function"><span class="params">e</span>=&gt;</span>e&gt;<span class="number">10</span>) <span class="comment">//每个数都大于 10? &gt;false</span></span><br><span class="line">arr.<span class="title function_">some</span>(<span class="function"><span class="params">e</span>=&gt;</span>e&gt;<span class="number">8</span>) <span class="comment">//存在大于 8 的元素? &gt;true</span></span><br><span class="line">arr.<span class="title function_">findIndex</span>(<span class="function"><span class="params">e</span>=&gt;</span>e===<span class="number">3</span>) <span class="comment">//找到第一个 3 的位置，没有就返回-1 &gt;3</span></span><br><span class="line">arr.<span class="title function_">indexOf</span>(<span class="number">3</span>) <span class="comment">//找到第一个 3 的位置，没有就返回-1 &gt;3</span></span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="number">3</span>) <span class="comment">//是否包含 3? &gt;true</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>数组过滤</span><br><span class="line">arr.<span class="title function_">find</span>(<span class="function"><span class="params">e</span>=&gt;</span>e&gt;<span class="number">3</span>) <span class="comment">//返回第一个大于 3 的值 &gt;4</span></span><br><span class="line">arr.<span class="title function_">filter</span>(<span class="function"><span class="params">e</span>=&gt;</span>e&gt;<span class="number">3</span>) <span class="comment">//返回所有大于 3 的值 &gt;[4,5,6,7,8,9]</span></span><br></pre></td></tr></table></figure></div>

<div class="note simple"><p><mark class="hl-label green">数组映射、遍历与截取</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">映射与截取不会改变原数组</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">let</span> flatArr=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span><span class="keyword">let</span> arr1=arr.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">3</span>) <span class="comment">//返回新数组[0,1,2]</span></span><br><span class="line"><span class="keyword">let</span> arr2=arr.<span class="title function_">slice</span>(<span class="number">1</span>) <span class="comment">// &gt;[1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"><span class="keyword">let</span> arr3=arr.<span class="title function_">slice</span>(-<span class="number">1</span>) <span class="comment">// &gt;[9]</span></span><br><span class="line"><span class="keyword">let</span> arr4=arr.<span class="title function_">slice</span>(<span class="number">1</span>,-<span class="number">1</span>) <span class="comment">// &gt;[1,2,3,4,5,6,7,8]</span></span><br><span class="line"><span class="number">2.</span><span class="keyword">let</span> arr5=arr.<span class="title function_">map</span>(<span class="function"><span class="params">e</span>=&gt;</span>e*<span class="number">2</span>) <span class="comment">//返回新数组[0,2,4,6,8,10,12,14,16,18]</span></span><br><span class="line"><span class="number">3.</span>arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">e</span>=&gt;</span>e*<span class="number">2</span>) <span class="comment">//无返回值只是遍历计算，一般情况下不可停止</span></span><br><span class="line"><span class="number">4.</span><span class="keyword">let</span> arr6=flatArr.<span class="title function_">flat</span>() <span class="comment">// &gt;arr6=[1,2,3,4,5,1]</span></span><br></pre></td></tr></table></figure></div>

<div class="note simple"><p><mark class="hl-label green">数组操作</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组操作会改变原数组</span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span><span class="keyword">let</span> a=arr.<span class="title function_">shift</span>()</span><br><span class="line"><span class="comment">//删除数组第一个元素 0,赋值给 a，所以:a=0;arr=[1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"><span class="keyword">let</span> b=arr.<span class="title function_">unshift</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">//向 arr 最前面依次插入 1,2,3，返回新数组长度，所以:</span></span><br><span class="line"><span class="comment">//b=13,arr=[1,2,3,0,1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"><span class="number">2.</span><span class="keyword">let</span> c=arr.<span class="title function_">pop</span>() <span class="comment">//尾部删除 &gt;c=9</span></span><br><span class="line"><span class="keyword">let</span> d=arr.<span class="title function_">push</span>(<span class="number">1</span>) <span class="comment">//尾部插入 &gt;d=11</span></span><br><span class="line"><span class="number">3.</span>arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//从索引 1 处开始，删除 2 个元素 &gt;arr=[0,3,4,5,6,7,8,9]</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">2</span>) <span class="comment">//删除 2 个，再插入 2 个 &gt;arr=[0,-1,-2,3,4,5,6,7,8,9]</span></span><br><span class="line"><span class="number">4.</span>arr.<span class="title function_">reverse</span>() <span class="comment">// &gt;arr=[9,8,7,6,5,4,3,2,1,0]</span></span><br><span class="line"><span class="number">5.</span>arr.<span class="title function_">concat</span>([-<span class="number">1</span>,-<span class="number">2</span>]) <span class="comment">// &gt;[0,1,2,3,4,5,6,7,8,9,-1,-2]</span></span><br></pre></td></tr></table></figure></div>

<div class="note simple"><p><mark class="hl-label green">数组排序、去重</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1=[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">let</span> arr2=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">1</span>]]</span><br><span class="line"><span class="keyword">let</span> obj=[&#123;<span class="attr">c</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">c</span>:<span class="number">5</span>&#125;,&#123;<span class="attr">c</span>:<span class="number">3</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>arr1.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b) <span class="comment">//会改变原数组 &gt;arr1=[1,2,2,3,4,4,7]</span></span><br><span class="line"><span class="number">2.</span>arr2.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a[<span class="number">0</span>]-a[<span class="number">0</span>]) <span class="comment">// &gt;arr2=[[1,2],[3,4],[5,1]]</span></span><br><span class="line">arr2.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a[<span class="number">1</span>]-a[<span class="number">1</span>]) <span class="comment">// &gt;arr2=[[5,1],[1,2],[3,4]</span></span><br><span class="line">obj.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a.<span class="property">c</span>-b.<span class="property">c</span>) <span class="comment">// &gt;obj=[&#123;c:1&#125;,&#123;c:3&#125;,&#123;c:5&#125;]</span></span><br><span class="line"><span class="number">3.</span><span class="keyword">let</span> arr0=[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr1)] <span class="comment">//去重 &gt;arr0=[2,1,3,4,5,7]</span></span><br></pre></td></tr></table></figure></div>

<div class="note simple"><p><mark class="hl-label green">reduce</mark> </p>
<p>语法:<br><strong>arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="number">1.</span>求和</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span>=(<span class="params">...res</span>)=&gt;res.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b,res.<span class="property">length</span>===<span class="number">0</span> &amp;&amp; <span class="number">0</span>)</span><br><span class="line"><span class="attr">eg</span>:</span><br><span class="line"><span class="title function_">sum</span>() <span class="comment">// &gt;0</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// &gt;6</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>二维数组变一维化</span><br><span class="line"><span class="keyword">let</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].<span class="title function_">reduce</span>(<span class="function">(<span class="params"> acc, cur </span>) =&gt;</span> acc.<span class="title function_">concat</span>(cur),[]);</span><br><span class="line"><span class="comment">// &gt; [0, 1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>管道函数</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pipe</span>=(<span class="params">...fns</span>)=&gt;<span class="function">(<span class="params">init</span>)=&gt;</span>fns.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,fn</span>)=&gt;</span><span class="title function_">fn</span>(pre),init)</span><br><span class="line"><span class="attr">eg</span>:</span><br><span class="line"><span class="title function_">pipe</span>(<span class="function"><span class="params">x</span>=&gt;</span>x\*<span class="number">2</span>,<span class="function"><span class="params">x</span>=&gt;</span>x\*\*<span class="number">2</span>)(<span class="number">2</span>) <span class="comment">// &gt;16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用代理实现链式操作</span></span><br><span class="line"><span class="keyword">var</span> pipe = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> funcStack = [];</span><br><span class="line">  <span class="keyword">var</span> oproxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125; , &#123;</span><br><span class="line">    get : <span class="keyword">function</span> (<span class="params">pipeObject, fnName</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (fnName === <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> funcStack.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">val, fn</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">fn</span>(val);</span><br><span class="line">        &#125;,value);</span><br><span class="line">      &#125;</span><br><span class="line">      funcStack.<span class="title function_">push</span>(<span class="variable language_">window</span>[fnName]);</span><br><span class="line">      <span class="keyword">return</span> oproxy;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> oproxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">double</span> = n =&gt; n * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">pow</span>    = n =&gt; n * n;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">reverseInt</span> = n =&gt; n.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) | <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">pipe</span>(<span class="number">3</span>).<span class="property">double</span>.<span class="property">pow</span>.<span class="property">reverseInt</span>.<span class="property">get</span>; <span class="comment">// 63</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>统计数组重复元素个数</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> count=nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,num</span>)=&gt;</span>&#123;</span><br><span class="line">pre[num]=(pre[num] || <span class="number">0</span>)+<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> pre</span><br><span class="line">&#125;,&#123;&#125;)</span><br><span class="line"><span class="comment">// &gt;&#123;1: 1, 2: 2, 3: 3, 4: 2, 5: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>按属性分组对象</span><br><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;Max&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">groupBy</span>(<span class="params">objectArray, property</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> objectArray.<span class="title function_">reduce</span>( <span class="function">(<span class="params">acc, obj</span>)=&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> key = obj[property];</span><br><span class="line"><span class="keyword">if</span> (!acc[key]) &#123;</span><br><span class="line">acc[key] = [];</span><br><span class="line">&#125;</span><br><span class="line">acc[key].<span class="title function_">push</span>(obj);</span><br><span class="line"><span class="keyword">return</span> acc;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> groupedPeople = <span class="title function_">groupBy</span>(people, <span class="string">&#x27;age&#x27;</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// 20: [</span></span><br><span class="line"><span class="comment">// &#123; name: &#x27;Max&#x27;, age: 20 &#125;,</span></span><br><span class="line"><span class="comment">// &#123; name: &#x27;Jane&#x27;, age: 20 &#125;</span></span><br><span class="line"><span class="comment">// ],</span></span><br><span class="line"><span class="comment">// 21: [&#123; name: &#x27;Alice&#x27;, age: 21 &#125;]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="first-2"><div class="note simple"><p><strong>AOP</strong> (面向切面编程) 的主要作用就是把一些和核心业务逻辑模块无关的功能抽取出来，然后再通过“动态织入”的方式掺到业务模块种。这些功能一般包括日志统计，安全控制，异常处理等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吃饭&#x27;</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">brushTeeth</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;刷牙&#x27;</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wipe</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;擦嘴&#x27;</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置函数</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">before</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="variable language_">this</span>; <span class="comment">// 保留原函数的引用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 返回包含了原函数和新函数的&quot;代理&quot;函数</span></span><br><span class="line">    <span class="comment">// 执行新函数，且保证 this 不被劫持，新函数接受的参数也会被原封不动地传入原函数，新函数在原函数之前执行</span></span><br><span class="line">    fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="comment">// 执行原函数并返回原函数的执行结果，并且保证 this 不被劫持</span></span><br><span class="line">    <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后置函数</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">after</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ret = self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = eat.<span class="title function_">before</span>(brushTeeth).<span class="title function_">after</span>(wipe);</span><br><span class="line"><span class="title function_">app</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="comment">// 刷牙 Arguments [&quot;test&quot;, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"><span class="comment">// 吃饭 Arguments [&quot;test&quot;, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"><span class="comment">// 擦嘴 Arguments [&quot;test&quot;, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br></pre></td></tr></table></figure></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="first-3"><div class="note simple"><p><mark class="hl-label green">防抖</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">简单实现</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, options</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; delay &#125; = options;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">  &#125;</span><br><span class="line">  timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">    timer = <span class="literal">null</span>;</span><br><span class="line">  &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="note simple"><p><mark class="hl-label green">节流</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">简单实现</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, options</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; delay &#125; = options;</span><br><span class="line"><span class="keyword">let</span> timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (timer) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="first-4"><div class="note simple"><p><mark class="hl-label green">柯里化</mark><br>给函数分步传递参数，每次传递部分参数，并返回一个更具体的函数接收剩下的参数，这中间可嵌套多层这样的接收部分参数的函数，直至返回最后结果。</p>
<p>作用：1、缓存参数；2、包装功能函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">简单实现</span><br><span class="line"><span class="comment">// ES6 的实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">func, args = []</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arity = func.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">..._args</span>) &#123;</span><br><span class="line">    _args.<span class="title function_">unshift</span>(...args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_args.<span class="property">length</span> &lt; arity) &#123;</span><br><span class="line">      <span class="keyword">return</span> currying.<span class="title function_">call</span>(<span class="literal">null</span>, func, _args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">func</span>(..._args);</span><br><span class="line">    j;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 被转换函数，用于检测传入的字符串是否符合正则表达式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkFun</span>(<span class="params">reg, str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> reg.<span class="title function_">test</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换柯里化</span></span><br><span class="line"><span class="keyword">let</span> check = <span class="title function_">currying</span>(checkFun);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产生新的功能函数</span></span><br><span class="line"><span class="keyword">let</span> checkPhone = <span class="title function_">check</span>(<span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>);</span><br><span class="line"><span class="keyword">let</span> checkEmail = <span class="title function_">check</span>(<span class="regexp">/^(\w)+(\.\w+)*@(\w)+((\.\w+)+)$/</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="note simple"><p><mark class="hl-label green">bind</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> = <span class="keyword">function</span>(<span class="params">context, ...args</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function">(<span class="params">...newArgs</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">apply</span>(context, args.<span class="title function_">concat</span>(newArgs));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="note simple"><p><mark class="hl-label green">反柯里化</mark><br>作用：将私有方法公有化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">简单实现</span><br><span class="line"><span class="comment">// ES6 的实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uncurring</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">call</span>(...args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用反柯里化创建检测数据类型的函数</span></span><br><span class="line"><span class="keyword">let</span> checkType = <span class="title function_">uncurring</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkType</span>(<span class="number">1</span>); <span class="comment">// [object Number]</span></span><br><span class="line"><span class="title function_">checkType</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">// [object String]</span></span><br><span class="line"><span class="title function_">checkType</span>(<span class="literal">true</span>); <span class="comment">// [object Boolean]</span></span><br></pre></td></tr></table></figure></div>

<div class="note simple"><p><mark class="hl-label green">通过函数调用生成反柯里化函数</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">uncurring</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span>.<span class="title function_">apply</span>(self, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">F.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;I&#x27;m &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&#x27; years old.&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 希望 sayHi 方法被任何对象使用</span></span><br><span class="line">sayHi = F.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span>.<span class="title function_">uncurring</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Panda&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;); <span class="comment">// &gt; I&#x27;m Panda, 20 years old.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="first-5"><div class="note simple"><p> <mark class="hl-label red">new</mark><br>1.创建（或者说构造）一个全新的对象。<br>2.这个新对象会被执行 [[ 原型 ]] 连接。<br>3.这个新对象会绑定到函数调用的 this。<br>4.如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn, ...rest</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">const</span> temp = fn.<span class="title function_">call</span>(obj, ...rest);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> temp <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? temp : obj;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
 </p>
</div>
 
<div class="note simple"><p><mark class="hl-label green">原型继承</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原型继承</span></span><br><span class="line"><span class="comment">// 把父类的实例作为子类的原型</span></span><br><span class="line"><span class="comment">// 缺点：子类的实例共享了父类构造函数的引用属性 不能传参</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> person = &#123;</span><br><span class="line">      <span class="attr">friends</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(person)</span><br><span class="line"></span><br><span class="line">    p1.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;aaa&quot;</span>)<span class="comment">//缺点：子类的实例共享了父类构造函数的引用属性</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person);<span class="comment">//缺点：子类的实例共享了父类构造函数的引用属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="note simple"><p><mark class="hl-label green">组合继承</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在子函数中运行父函数，但是要利用 call 把 this 改变一下，</span></span><br><span class="line"><span class="comment">// 再在子函数的 prototype 里面 new Father() ,使 Father 的原型中的方法也得到继承，最后改变 Son 的原型中的 constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缺点：调用了两次父类的构造函数，造成了不必要的消耗，父类方法可以复用</span></span><br><span class="line"><span class="comment">// 优点可传参，不共享父类引用属性</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">hobby</span> = [<span class="string">&quot;篮球&quot;</span>, <span class="string">&quot;足球&quot;</span>, <span class="string">&quot;乒乓球&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">      <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line">    <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;ming&quot;</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="note simple"><p><mark class="hl-label green">寄生组合继承</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所谓寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。</span></span><br><span class="line"><span class="comment">//其背后的基本思路是：不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已。</span></span><br><span class="line"><span class="comment">//本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//寄生组合式继承应该是目前最稳定的继承模式</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">hobby</span> = [<span class="string">&quot;篮球&quot;</span>, <span class="string">&quot;足球&quot;</span>, <span class="string">&quot;乒乓球&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">      <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;ming&quot;</span>, <span class="number">18</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s2);</span><br></pre></td></tr></table></figure></div>
<div class="note simple"><p><mark class="hl-label green">class-extends继承</mark> </p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="first-6"><div class="note simple"><p><mark class="hl-label green">copy原理</mark><br>js中，对于赋值操作符:&#x3D;<br>基本类型的数据：number，string，boolean等的赋值copy直接是深拷贝<br>对于引用类型的数据:array，object等的赋值copy是copy第一层的引用地址，操作对象始终是原对象</p>
</div>
<div class="note simple"><p><mark class="hl-label green">浅拷贝</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">//浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> b=a</span><br><span class="line"><span class="keyword">let</span> arr2=[...arr]</span><br></pre></td></tr></table></figure></div><div class="note simple"><p><mark class="hl-label green">深拷贝</mark><br>注意<br>1.数据类型校验<br>2.循环引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">data, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (data == <span class="literal">undefined</span>) <span class="keyword">return</span> data;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> data;</span><br><span class="line">  <span class="keyword">if</span> (data <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(data);</span><br><span class="line">  <span class="keyword">if</span> (data <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> v = hash.<span class="title function_">get</span>(data);</span><br><span class="line">  <span class="keyword">if</span> (v) <span class="keyword">return</span> v;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> instance = <span class="keyword">new</span> data.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">  hash.<span class="title function_">set</span>(data, instance);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      instance[key] = <span class="title function_">deepClone</span>(data[key], hash);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;bob&#x27;</span>,</span><br><span class="line">  <span class="attr">desc</span>: &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">deepClone</span>(a);</span><br><span class="line">b.<span class="property">desc</span>.<span class="property">age</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// js循环引用</span></span><br><span class="line"><span class="keyword">var</span> t = &#123;&#125;;</span><br><span class="line">t.<span class="property">t</span> = t;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">deepClone</span>(t));</span><br></pre></td></tr></table></figure></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<div class="note success simple"><h2 id="思想进阶"><a href="#思想进阶" class="headerlink" title="思想进阶"></a>思想进阶</h2></div>
<div class="tabs" id="first"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#first-1">设计模式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="first-1"><p><a href="https://imgtu.com/i/jvPCBd"><img src="https://s1.ax1x.com/2022/07/25/jvPCBd.png" alt="jvPCBd.png" border="0" /></a><br><a href="https://hefeng6500.github.io/blog/design-patterns">设计模式引用讲解</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<div class="note success simple"><h2 id="应用进阶"><a href="#应用进阶" class="headerlink" title="应用进阶"></a>应用进阶</h2></div>
<div class="tabs" id="first"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#first-1">dom应用</button></li><li class="tab"><button type="button" data-href="#first-2">性能优化</button></li><li class="tab"><button type="button" data-href="#first-3">React</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="first-1"><div class="note simple"><p><mark class="hl-label green">包装简易jquery</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">jQuery</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> slice = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>;</span><br><span class="line">    <span class="keyword">let</span> dom = slice.<span class="title function_">call</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector));</span><br><span class="line">    <span class="keyword">let</span> len = dom ? dom.<span class="property">length</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>[i] = dom[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = len;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">selector</span> = selector || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">append</span>(<span class="params">node</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">addClass</span>(<span class="params">name</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">html</span>(<span class="params">data</span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// 此处省略若干 API</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">$</span> = <span class="keyword">function</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">jQuery</span>(selector);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<div class="note simple"><p><mark class="hl-label green">利用代理包装简易dom操作语言</mark> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dom = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">attrs = &#123;&#125;, ...children</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(property);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(attrs)) &#123;</span><br><span class="line">        el.<span class="title function_">setAttribute</span>(prop, attrs[prop]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> child <span class="keyword">of</span> children) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> child === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">          child = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(child);</span><br><span class="line">        &#125;</span><br><span class="line">        el.<span class="title function_">appendChild</span>(child);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> el;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> el = dom.<span class="title function_">div</span>(&#123;&#125;,</span><br><span class="line">  <span class="string">&#x27;Hello, my name is &#x27;</span>,</span><br><span class="line">  dom.<span class="title function_">a</span>(&#123;<span class="attr">href</span>: <span class="string">&#x27;//example.com&#x27;</span>&#125;, <span class="string">&#x27;Mark&#x27;</span>),</span><br><span class="line">  <span class="string">&#x27;. I like:&#x27;</span>,</span><br><span class="line">  dom.<span class="title function_">ul</span>(&#123;&#125;,</span><br><span class="line">    dom.<span class="title function_">li</span>(&#123;&#125;, <span class="string">&#x27;The web&#x27;</span>),</span><br><span class="line">    dom.<span class="title function_">li</span>(&#123;&#125;, <span class="string">&#x27;Food&#x27;</span>),</span><br><span class="line">    dom.<span class="title function_">li</span>(&#123;&#125;, <span class="string">&#x27;…actually that\&#x27;s it&#x27;</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(el);</span><br></pre></td></tr></table></figure></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="first-2"><div class="note simple"><p><mark class="hl-label green">长列表渲染</mark><br><a href="https://hefeng6500.github.io/blog/performance">见链接</a></p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="first-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
  </entry>
</search>
